{
	"textToTextBinary": "Text for binary text",
	"functionToConvertTextInTextBinary": "Function to convert text to binary text",
	"contentInAscii": "Ascii content",
	"toLogic": "For logic",
	"functionConvertToLogic": "Function to convert to logical",
	"convertToBytes": "bytes to text",
	"functionToConvertTextBinaryToText": "Function to convert binary text to text",
	"contentInTextBinary": "Binary text content",
	"convertToAscii": "Convert char to ASCII code",
	"functionToConvertToAscii": "Function to convert char to ASCII code",
	"content": "Content",
	"convertStringToJs": "Text to javascript text",
	"functionToConvertStringToJs": "Function to convert text to javascript escaping text",
	"convertStringToDate": "Convert text to data",
	"functionToConvertStringToDate": "Function to convert text to data",
	"minSize": "Minimum size",
	"convertIntToHex": "Convert to hexadecimal",
	"functionToConvertIntToHex": "Function to convert integer to hexadecimal",
	"convertToLong": "Convert to long",
	"functionToConvertToLong": "Function to convert to long",
	"convertToString": "Convert to text",
	"functionToConvertToString": "Function to convert to text",
	"getMinuteFromDate": "Get date minute",
	"functionToGetMinuteFromDate": "Function to get minute of date",
	"date": "Date",
	"getSecondFromDate": "Get date second",
	"functionToGetSecondFromDate": "Function to get date second",
	"getHourFromDate": "Get date time",
	"functionToGetHourFromDate": "Function to get date time",
	"getYearFromDate": "Get year of date",
	"functionToGetYearFromDate": "Function to get year of date",
	"getMonthFromDate": "Get month of date",
	"functionToGetMonthFromDate": "Function to get date month",
	"getDayFromDate": "Get date day",
	"functionToGetDayFromDate": "Function to get date day",
	"getMonthsBetweenDates": "Get total of months between dates",
	"functionToGetMonthsBetweenDates": "Function to get total of months between dates",
	"largerDateToBeSubtracted": "Larger date to be subtracted",
	"smallerDateToBeSubtracted": "Minor date to be subtracted",
	"getYearsBetweenDates": "Get total of years between dates",
	"functionToGetYearsBetweenDates": "Function to get total of years between dates",
	"incDay": "Increment day on date",
	"functionToIncDay": "Function to increment day in date",
	"daysToIncrement": "Days to increase",
	"incMonth": "Increase month on date",
	"functionToIncMonth": "Function to increment month in date",
	"monthsToIncrement": "Months to increase",
	"incYear": "Increase year by date",
	"functionToIncYear": "Function to increment year in date",
	"yearsToIncrement": "Years to increase",
	"getNow": "Get current date and time",
	"functionToGetNow": "Function to get current date and time",
	"getDaysBetweenDates": "Get days total between dates",
	"functionToGetDaysBetweenDates": "Function to get days total between dates",
	"formatDateTime": "Format date",
	"functionToFormatDateTime": "Function to format date",
	"getValueIsNotNumber": "Get value that is not number",
	"functionToGetValueIsNotNumber": "Function to get value that is not number",
	"format": "Format",
	"newDate": "New date",
	"functionToNewDate": "Function to create new date",
	"month": "Month",
	"year": "Year",
	"day": "Day",
	"hour": "Hour",
	"minute": "Minute",
	"second": "Second",
	"callServerBlocklyAsync": "Call blockly server async",
	"functionToCallServerBlocklyAsync": "function to block server call async",
	"classNameWithMethod": "Blockly name",
	"callbackSuccess": "Callback success: callback function when success",
	"callbackError": "Callback error: callback function when error occurs",
	"params": "Parameters",
	"callServerBlockly": "Call blockly",
	"functionToCallServerBlockly": "function to block server call",
	"makeCallServerBlocklyAsync": "call blockly asynchronous server - callback with blockly",
	"functionToMakeCallServerBlocklyAsync": "Function to call blockly from the asynchronous server and with possibility to set the callbacks as string (blockly complete name)",
	"blocklyWithFunction": "Blockly name",
	"callbackBlocklySuccess": "Callback success: blockly (full) name to be called when to get the server response successfully",
	"callbackBlocklyError": "Callback error: blockly (full) name to be called when retrieving server response with error",
	"changeValueOfField": "Change field value",
	"functionToChangeValueOfField": "Function to change field value",
	"field": "Field",
	"Value": "Value",
	"CategoryType.CONVERSION": "Conversion",
	"CategoryType.UTIL": "Util",
	"CategoryType.SCREEN": "Form",
	"CategoryType.DATETIME": "Date and time",
	"CategoryType.XML": "Xml",
	"getValueOfField": "Get value of field",
	"functionToGetValueOfField": "Function to get value of field",
	"fieldNameFromScreen": "Get field name",
	"functionToGetFieldNameFromScreen": "Function to get field name (You need to associate the blockly with the form)",
	"throwExceptionName": "Throw Exception",
	"throwExceptionDescription": "Function that throw a exception with a message",
	"throwExceptionParam0": "Message",
	"createExceptionName": "Create exception",
	"createExceptionDescription": "Function that create a exception",
	"createExceptionParam0": "Message",
	"createScopeVariableName": "Create scope variable",
	"createScopeVariableDescription": "Function that create a scope variable",
	"createScopeVariableParam0": "Name",
	"createScopeVariableParam1": "Value",
	"startInsertingModeName": "Start the insert mode",
	"startInsertingModeDescription": "Function that receive a datasource and start the insertion mode",
	"startInsertingModeParam0": "Datasource",
	"datasourceFromScreenName": "Get Datasource",
	"datasourceFromScreenDescription": "Function that return the datasource name from target",
	"datasourceFromScreenParam0": "Datasource name",
	"startEditingModeName": "Start edition mode",
	"startEditingModeDescription": "Function that receive a datasource and start the edition mode",
	"startEditingModeParam0": "Datasource",
	"previusRecordName": "Turn back record",
	"previusRecordDescription": "Function that turn back the datasource cursor",
	"previusRecordParam0": "Datasource",
	"nextRecordName": "Go forward record",
	"nextRecordDescription": "Function that go forward datasource cursor",
	"nextRecordParam0": "Datasource",
	"removeRecordName": "Remove record",
	"removeRecordDescription": "Function that start the datasource remove mode",
	"removeRecordParam0": "Datasource",
	"hasNextRecordName": "Exists next record?",
	"hasNextRecordDescription": "Function that return if exists a next record",
	"hasNextRecordParam0": "Datasource",
	"quantityRecordsName": "Quantity of records",
	"quantityRecordsDescription": "Function that returns the quantity of all records on datasource",
	"quantityRecordsParam0": "Datasource",
	"datasourcePostName": "Post",
	"datasourcePostDescription": "Function that call the post() method of datasource",
	"datasourcePostParam0": "Datasouce",
	"datasourceFilterName": "Filter",
	"datasourceFilterDescription": "Function that filter a datasource concat '/' and the path on parameter",
	"datasourceFilterParam0": "Datasource",
	"datasourceFilterParam1": "Caminho",
	"getParam": "Get param",
	"functionToGetParam": "Function to get param from query string",
	"paramName": "Param name",
	"changeView": "Change view",
	"functionToChangeView": "Function to change the current view",
	"view": "Destination view",
	"openUrl": "Open url",
	"functionToOpenUrl": "Function to open url",
	"url": "Destination url",
	"newTab": "New tab?",
	"width": "Width",
	"height": "Height",
	"screenNotifyName": "Show notification",
	"screenNotifyDescription": "Function that show a notification",
	"screenNotifyParam0": "Notification type: Can receive values success, error, warning, info or primary",
	"screenNotifyParam1": "Message",
	"getScopeVariableName": "Get scope variable",
	"getScopeVariableDescription": "Function that get the scope variable value",
	"getScopeVariableParam0": "Variable name",
	"ObjectType.DATETIME": "Date",
	"confirmDialogName": "Confirm action",
	"confirmDialogDescription": "Function that shows a confirm action and return true of false",
	"confirmDialogParam0": "Message",
	"createDefaultModalDescription": "Function that create a modal",
	"createDefaultModalName": "Create Modal",
	"createDefaultModalParam1": "Title: Modal title",
	"createDefaultModalParam2": "Message: Message shown on modal",
	"createDefaultModalParam3": "Cancel button name",
	"createDefaultModalParam4": "Confirm button name",
	"createDefaultModalParam5": "On Success: Statements to be executed when a confirm button is clicked on modal",
	"createDefaultModalParam6": "On Cancel: Statements to be executed when a cancel button is clicked on modal",
	"node": "Node",
	"childName": "Child name",
	"element": "Element",
	"attribute": "Attribute",
	"LogicIsNullParam": "Variable: Variable to be checked",
	"LogicIsNullName": "is null?",
	"LogicIsNullDescription": "Function that check if a variable is null",
	"LogicIsNullOrEmptyName": "is null or empty?",
	"LogicIsNullOrEmptyDescription": "Function that check if a variable is null or empty",
	"LogicIsEmptyName": "is empty?",
	"LogicIsEmptyDescription": "Function that check if a variable is empty",
	"createDefaultModalParam7": "On close: statements executed when close button is clicked on modal",
	"executeJavascriptNoReturnName": "Execute javascript",
	"executeJavascriptNoReturnDescription": "Function that execute a javascript",
	"executeJavascriptNoReturnParam0": "Command:Command to be executed (example: alert('test');).",
	"newXMLEmptyName": "Create XML",
	"newXMLEmptyDescription": "Function that create a XML document",
	"rootElement": "Root element",
	"newXMLElementName": "Create XML element",
	"newXMLElementDescription": "Function that create a XML element",
	"elementName": "Element name",
	"addXMLElementName": "Add XML element",
	"addXMLElementDescription": "Function that add a XML element inside a parent element",
	"parentElement": "Parent element",
	"elementToAdd": "Element to add",
	"XMLHasRootElementDescription": "Function that verify if exists a XML root element on XML document",
	"XMLGetRootElementName": "Get root element",
	"XMLGetRootElementDescription": "Function that get a root element from a XML document or from a XMl element",
	"XMLDocumentToTextName": "Convert XML to text",
	"XMLDocumentToTextDescription": "Function that convert a XML document or XML element to text",
	"getChildrenName": "Get children element",
	"getChildrenDescription": "Function that return a list with children element",
	"getChildrenParam1": "Value to search:A element or a element name to be search key",
	"setAttributeName": "Set an attribute value",
	"setAttributeDescription": "Function that set an attribute value on attribute",
	"attributeName": "Attribute name",
	"attributeValue": "Attribute value",
	"getAttributeValueName": "Get an attribute value",
	"getAttributeValueDescription": "Function that get an attribute value",
	"getParentNodeName": "Get parent element",
	"getParentNodeDescription": "Function that return a parent element from a XML element",
	"setElementValueName": "Set a content element",
	"setElementValueDescription": "Function that set a content on element",
	"removeElementName":"Remove element",
	"removeElementDescription":"Function that receive a Função que recebe um elemento pai e um elemento ou nome de elemento para remover",
	"getElementNameName":"Get an element name",
	"getElementNameDescription":"Function that get an element name, example <test> return test",
	"renameElementName":"Rename element",
	"renameElementDescription":"Function that rename an element name, example: before<oldElement/> after:<newElement/>",
	"name":"Name",
	"newXMLEmptyWithRootName":"Create XML",
	"XMLHasRootElementName":"Has Root element?",
	"getElementContentName":"Get element content",
	"getElementContentDescription":"Function that get a content from element. Example <element>content<element> return content",
	 "datasource" : "Datasource"
}